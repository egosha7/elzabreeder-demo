// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	multipart "mime/multipart"
	reflect "reflect"

	domain "github.com/egosha7/site-go/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// AddEmail mocks base method.
func (m *MockServices) AddEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEmail indicates an expected call of AddEmail.
func (mr *MockServicesMockRecorder) AddEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockServices)(nil).AddEmail), email)
}

// DogAdd mocks base method.
func (m *MockServices) DogAdd(puppy *domain.Dog, fileHeaders []*multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DogAdd", puppy, fileHeaders)
	ret0, _ := ret[0].(error)
	return ret0
}

// DogAdd indicates an expected call of DogAdd.
func (mr *MockServicesMockRecorder) DogAdd(puppy, fileHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DogAdd", reflect.TypeOf((*MockServices)(nil).DogAdd), puppy, fileHeaders)
}

// DogChangeArchived mocks base method.
func (m *MockServices) DogChangeArchived(puppyID, archived string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DogChangeArchived", puppyID, archived)
	ret0, _ := ret[0].(error)
	return ret0
}

// DogChangeArchived indicates an expected call of DogChangeArchived.
func (mr *MockServicesMockRecorder) DogChangeArchived(puppyID, archived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DogChangeArchived", reflect.TypeOf((*MockServices)(nil).DogChangeArchived), puppyID, archived)
}

// DogUpdate mocks base method.
func (m *MockServices) DogUpdate(dog *domain.Dog, fileHeaders []*multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DogUpdate", dog, fileHeaders)
	ret0, _ := ret[0].(error)
	return ret0
}

// DogUpdate indicates an expected call of DogUpdate.
func (mr *MockServicesMockRecorder) DogUpdate(dog, fileHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DogUpdate", reflect.TypeOf((*MockServices)(nil).DogUpdate), dog, fileHeaders)
}

// DogsGet mocks base method.
func (m *MockServices) DogsGet(chocolates, genders []string, id string, archived bool) ([]domain.Dog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DogsGet", chocolates, genders, id, archived)
	ret0, _ := ret[0].([]domain.Dog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DogsGet indicates an expected call of DogsGet.
func (mr *MockServicesMockRecorder) DogsGet(chocolates, genders, id, archived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DogsGet", reflect.TypeOf((*MockServices)(nil).DogsGet), chocolates, genders, id, archived)
}

// FeedbackAdd mocks base method.
func (m *MockServices) FeedbackAdd(feedback *domain.Feedback, fileHeaders []*multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeedbackAdd", feedback, fileHeaders)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeedbackAdd indicates an expected call of FeedbackAdd.
func (mr *MockServicesMockRecorder) FeedbackAdd(feedback, fileHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedbackAdd", reflect.TypeOf((*MockServices)(nil).FeedbackAdd), feedback, fileHeaders)
}

// FeedbackChangeChecked mocks base method.
func (m *MockServices) FeedbackChangeChecked(feedbackID, checked string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeedbackChangeChecked", feedbackID, checked)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeedbackChangeChecked indicates an expected call of FeedbackChangeChecked.
func (mr *MockServicesMockRecorder) FeedbackChangeChecked(feedbackID, checked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedbackChangeChecked", reflect.TypeOf((*MockServices)(nil).FeedbackChangeChecked), feedbackID, checked)
}

// FeedbackDelete mocks base method.
func (m *MockServices) FeedbackDelete(feedbackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeedbackDelete", feedbackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeedbackDelete indicates an expected call of FeedbackDelete.
func (mr *MockServicesMockRecorder) FeedbackDelete(feedbackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedbackDelete", reflect.TypeOf((*MockServices)(nil).FeedbackDelete), feedbackID)
}

// FeedbackGet mocks base method.
func (m *MockServices) FeedbackGet(idPuppy, verified string) (*domain.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeedbackGet", idPuppy, verified)
	ret0, _ := ret[0].(*domain.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeedbackGet indicates an expected call of FeedbackGet.
func (mr *MockServicesMockRecorder) FeedbackGet(idPuppy, verified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedbackGet", reflect.TypeOf((*MockServices)(nil).FeedbackGet), idPuppy, verified)
}

// FeedbackUpdate mocks base method.
func (m *MockServices) FeedbackUpdate(feedback *domain.Feedback, fileHeaders []*multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeedbackUpdate", feedback, fileHeaders)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeedbackUpdate indicates an expected call of FeedbackUpdate.
func (mr *MockServicesMockRecorder) FeedbackUpdate(feedback, fileHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedbackUpdate", reflect.TypeOf((*MockServices)(nil).FeedbackUpdate), feedback, fileHeaders)
}

// GetPagedPuppies mocks base method.
func (m *MockServices) GetPagedPuppies(puppies []domain.Puppy, currentPage, perPage int) ([]domain.Puppy, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPagedPuppies", puppies, currentPage, perPage)
	ret0, _ := ret[0].([]domain.Puppy)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPagedPuppies indicates an expected call of GetPagedPuppies.
func (mr *MockServicesMockRecorder) GetPagedPuppies(puppies, currentPage, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagedPuppies", reflect.TypeOf((*MockServices)(nil).GetPagedPuppies), puppies, currentPage, perPage)
}

// PuppiesGet mocks base method.
func (m *MockServices) PuppiesGet(chocolates, genders []string, idPuppy, readyToMove string, page int, archived bool) ([]domain.Puppy, map[int]int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PuppiesGet", chocolates, genders, idPuppy, readyToMove, page, archived)
	ret0, _ := ret[0].([]domain.Puppy)
	ret1, _ := ret[1].(map[int]int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// PuppiesGet indicates an expected call of PuppiesGet.
func (mr *MockServicesMockRecorder) PuppiesGet(chocolates, genders, idPuppy, readyToMove, page, archived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PuppiesGet", reflect.TypeOf((*MockServices)(nil).PuppiesGet), chocolates, genders, idPuppy, readyToMove, page, archived)
}

// PuppyAdd mocks base method.
func (m *MockServices) PuppyAdd(puppy *domain.Puppy, fileHeaders []*multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PuppyAdd", puppy, fileHeaders)
	ret0, _ := ret[0].(error)
	return ret0
}

// PuppyAdd indicates an expected call of PuppyAdd.
func (mr *MockServicesMockRecorder) PuppyAdd(puppy, fileHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PuppyAdd", reflect.TypeOf((*MockServices)(nil).PuppyAdd), puppy, fileHeaders)
}

// PuppyChangeArchived mocks base method.
func (m *MockServices) PuppyChangeArchived(puppyID, archived, city, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PuppyChangeArchived", puppyID, archived, city, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// PuppyChangeArchived indicates an expected call of PuppyChangeArchived.
func (mr *MockServicesMockRecorder) PuppyChangeArchived(puppyID, archived, city, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PuppyChangeArchived", reflect.TypeOf((*MockServices)(nil).PuppyChangeArchived), puppyID, archived, city, phone)
}

// PuppyDelete mocks base method.
func (m *MockServices) PuppyDelete(puppyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PuppyDelete", puppyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PuppyDelete indicates an expected call of PuppyDelete.
func (mr *MockServicesMockRecorder) PuppyDelete(puppyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PuppyDelete", reflect.TypeOf((*MockServices)(nil).PuppyDelete), puppyID)
}

// PuppyGet mocks base method.
func (m *MockServices) PuppyGet(idPuppy string) (*domain.Puppy, *domain.Dog, *domain.Dog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PuppyGet", idPuppy)
	ret0, _ := ret[0].(*domain.Puppy)
	ret1, _ := ret[1].(*domain.Dog)
	ret2, _ := ret[2].(*domain.Dog)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// PuppyGet indicates an expected call of PuppyGet.
func (mr *MockServicesMockRecorder) PuppyGet(idPuppy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PuppyGet", reflect.TypeOf((*MockServices)(nil).PuppyGet), idPuppy)
}

// PuppyUpdate mocks base method.
func (m *MockServices) PuppyUpdate(puppy *domain.Puppy, fileHeaders []*multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PuppyUpdate", puppy, fileHeaders)
	ret0, _ := ret[0].(error)
	return ret0
}

// PuppyUpdate indicates an expected call of PuppyUpdate.
func (mr *MockServicesMockRecorder) PuppyUpdate(puppy, fileHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PuppyUpdate", reflect.TypeOf((*MockServices)(nil).PuppyUpdate), puppy, fileHeaders)
}

// ReviewsGet mocks base method.
func (m *MockServices) ReviewsGet(idReview string, checked bool) ([]domain.Feedback, map[int]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewsGet", idReview, checked)
	ret0, _ := ret[0].([]domain.Feedback)
	ret1, _ := ret[1].(map[int]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReviewsGet indicates an expected call of ReviewsGet.
func (mr *MockServicesMockRecorder) ReviewsGet(idReview, checked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewsGet", reflect.TypeOf((*MockServices)(nil).ReviewsGet), idReview, checked)
}

// MockAuthorizationServices is a mock of AuthorizationServices interface.
type MockAuthorizationServices struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServicesMockRecorder
}

// MockAuthorizationServicesMockRecorder is the mock recorder for MockAuthorizationServices.
type MockAuthorizationServicesMockRecorder struct {
	mock *MockAuthorizationServices
}

// NewMockAuthorizationServices creates a new mock instance.
func NewMockAuthorizationServices(ctrl *gomock.Controller) *MockAuthorizationServices {
	mock := &MockAuthorizationServices{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationServices) EXPECT() *MockAuthorizationServicesMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockAuthorizationServices) CheckPasswordHash(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockAuthorizationServicesMockRecorder) CheckPasswordHash(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockAuthorizationServices)(nil).CheckPasswordHash), password, hash)
}

// CreateUser mocks base method.
func (m *MockAuthorizationServices) CreateUser(login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationServicesMockRecorder) CreateUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorizationServices)(nil).CreateUser), login, password)
}

// GenerateToken mocks base method.
func (m *MockAuthorizationServices) GenerateToken(user *domain.User, ip string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user, ip)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationServicesMockRecorder) GenerateToken(user, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorizationServices)(nil).GenerateToken), user, ip)
}

// HashPassword mocks base method.
func (m *MockAuthorizationServices) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockAuthorizationServicesMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockAuthorizationServices)(nil).HashPassword), password)
}
